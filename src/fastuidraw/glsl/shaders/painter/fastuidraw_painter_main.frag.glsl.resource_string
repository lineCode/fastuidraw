/*!
 * \file fastuidraw_painter_main.frag.glsl.resource_string
 * \brief file fastuidraw_painter_main.frag.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@intel.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@intel.com>
 *
 */


#ifdef FASTUIDRAW_PAINTER_UNPACK_AT_FRAGMENT_SHADER
  uint fastuidraw_frag_shader;
  uint fastuidraw_frag_shader_data_location;
  uint fastuidraw_blend_shader;
  uint fastuidraw_blend_shader_data_location;
#endif

#ifdef FASTUIDRAW_PAINTER_BLEND_DUAL_SRC_BLEND
  layout(location = 0, index = 0) out vec4 fastuidraw_final_color0;
  layout(location = 0, index = 1) out vec4 fastuidraw_final_color1;
#elif defined(FASTUIDRAW_PAINTER_BLEND_SINGLE_SRC_BLEND)
  layout(location = 0) out vec4 fastuidraw_final_color;
#elif defined(FASTUIDRAW_PAINTER_BLEND_FRAMEBUFFER_FETCH)
  layout(location = 0) inout vec4 fastuidraw_final_color;
#endif

#ifdef FASTUIDRAW_PAINTER_DISCARD_CLIPS

  void
  apply_clipping(void)
  {
    /* hardware clipping is slightly different in output (on GEN atleast)
       that using discard style clipping. The cause is because hardware
       clipping changes what geometry is rasterized to the clip planes
       where as discard style evaluates the value at a sample point
       and the value is interpolated from the vertices. In exact arithematic
       they are the same, but we do not have exact arithmatic. We fudge
       the clip value by epsilon which is set to the width of half a
       pixel (recall the clipping equations are already in clip coordinates).
     */
    float epsilon = 0.5 * fastuidraw_viewport_recip_pixels_magnitude;
    if (fastuidraw_clip_planes.x < epsilon || fastuidraw_clip_planes.y < epsilon
       || fastuidraw_clip_planes.z < epsilon  || fastuidraw_clip_planes.w < epsilon)
      {
        FASTUIDRAW_DISCARD;
      }
  }

#else

  void
  apply_clipping(void)
  {}

#endif

void
main(void)
{
  vec4 c, b, v;

  apply_clipping();

  #ifdef FASTUIDRAW_PAINTER_UNPACK_AT_FRAGMENT_SHADER
    {
      fastuidraw_shader_header h;

      fastuidraw_read_header(fastuidraw_header_varying, h);

      h.item_shader = FASTUIDRAW_EXTRACT_BITS(fastuidraw_item_shader_bit0,
                                              fastuidraw_item_shader_num_bits,
                                              h.item_blend_shader_packed);

      h.blend_shader = FASTUIDRAW_EXTRACT_BITS(fastuidraw_blend_shader_bit0,
                                               fastuidraw_blend_shader_num_bits,
                                               h.item_blend_shader_packed);

      fastuidraw_frag_shader = h.item_shader;
      fastuidraw_frag_shader_data_location = h.item_shader_data_location;
      fastuidraw_blend_shader = h.blend_shader;
      fastuidraw_blend_shader_data_location = h.blend_shader_data_location;

      uint brush_data_loc;
      brush_data_loc = h.brush_shader_data_location;
      fastuidraw_painter_brush_unpack_values(h.brush_shader, brush_data_loc);
    }
  #endif

  fastuidraw_brush_position = vec2(fastuidraw_brush_p_x, fastuidraw_brush_p_y);

  FASTUIDRAW_BEGIN_AUX_LOCK;
  c = fastuidraw_run_frag_shader(fastuidraw_frag_shader, fastuidraw_frag_shader_data_location);
  FASTUIDRAW_END_AUX_LOCK;

  b = fastuidraw_compute_brush_color();
  v = b * c;
  v.rgb *= v.a;

  #ifdef FASTUIDRAW_PAINTER_BLEND_DUAL_SRC_BLEND
    {
      fastuidraw_run_blend_shader(fastuidraw_blend_shader, fastuidraw_blend_shader_data_location, v, fastuidraw_final_color0, fastuidraw_final_color1);
    }
  #endif

  #ifdef FASTUIDRAW_PAINTER_BLEND_SINGLE_SRC_BLEND
    {
      fastuidraw_run_blend_shader(fastuidraw_blend_shader, fastuidraw_blend_shader_data_location, v, fastuidraw_final_color);
    }
  #endif

  #ifdef FASTUIDRAW_PAINTER_BLEND_FRAMEBUFFER_FETCH
    {
      vec4 in_fb, out_fb;
      in_fb = fastuidraw_final_color;
      fastuidraw_run_blend_shader(fastuidraw_blend_shader, fastuidraw_blend_shader_data_location, v, in_fb, out_fb);
      fastuidraw_final_color = out_fb;
    }
  #endif
}
