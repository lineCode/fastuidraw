/*!
 * \file fastuidraw_painter_util.geom.glsl.resource_string
 * \brief file fastuidraw_painter_util.geom.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@intel.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@intel.com>
 *
 */
layout(triangles) in;

#ifdef FASTUIDRAW_PAINTER_GEOMETRY_SHADER_CLIPPING

layout(triangle_strip, max_vertices = 7) out;

struct fastuidraw_clipper_data_field
{
  vec4 element0_3;
  vec4 element4_7;
};

struct fastuidraw_clipper_data
{
  int count; // 0 <= count <= 7
  fastuidraw_clipper_data_field b0, b1, b2;
  vec4 write_mask;
  vec3 last_barycentric;
};

#define fastuidraw_clipper_data_bary0(A) vec3(A.b0.element0_3.x, A.b1.element0_3.x, A.b2.element0_3.x)
#define fastuidraw_clipper_data_bary1(A) vec3(A.b0.element0_3.y, A.b1.element0_3.y, A.b2.element0_3.y)
#define fastuidraw_clipper_data_bary2(A) vec3(A.b0.element0_3.z, A.b1.element0_3.z, A.b2.element0_3.z)
#define fastuidraw_clipper_data_bary3(A) vec3(A.b0.element0_3.w, A.b1.element0_3.w, A.b2.element0_3.w)
#define fastuidraw_clipper_data_bary4(A) vec3(A.b0.element4_7.x, A.b1.element4_7.x, A.b2.element4_7.x)
#define fastuidraw_clipper_data_bary5(A) vec3(A.b0.element4_7.y, A.b1.element4_7.y, A.b2.element4_7.y)
#define fastuidraw_clipper_data_bary6(A) vec3(A.b0.element4_7.z, A.b1.element4_7.z, A.b2.element4_7.z)

struct fastuidraw_clipper_data_iterator
{
  int count;
  vec4 read_mask;
};

void
fastuidraw_clipper_data_iterator_init_front(out fastuidraw_clipper_data_iterator d,
                                            in fastuidraw_clipper_data src)
{
  d.count = 0;
  d.read_mask = vec4(1.0, 0.0, 0.0, 0.0);
}

vec3
fastuidraw_clipper_data_iterator_read(in fastuidraw_clipper_data_iterator iter,
                                      in fastuidraw_clipper_data src)
{
  vec4 tmp0, tmp1, tmp2;

  if (iter.count < 4)
    {
      tmp0 = src.b0.element0_3;
      tmp1 = src.b1.element0_3;
      tmp2 = src.b2.element0_3;
    }
  else
    {
      tmp0 = src.b0.element4_7;
      tmp1 = src.b1.element4_7;
      tmp2 = src.b2.element4_7;
    }

  return vec3(dot(tmp0, iter.read_mask),
              dot(tmp1, iter.read_mask),
              dot(tmp2, iter.read_mask));
}

void
fastuidraw_clipper_data_iterator_increment(inout fastuidraw_clipper_data_iterator iter)
{
  ++iter.count;
  iter.read_mask.yzwx = iter.read_mask;
}

void
fastuidraw_clipper_data_iterator_decrement(inout fastuidraw_clipper_data_iterator iter)
{
  --iter.count;
  iter.read_mask = iter.read_mask.yzwx;
}

void
fastuidraw_clipper_data_iterator_init_back(out fastuidraw_clipper_data_iterator d,
                                           in fastuidraw_clipper_data src)
{
  d.count = src.count;
  d.read_mask = src.write_mask;
  fastuidraw_clipper_data_iterator_decrement(d);
}

void
fastuidraw_clipper_data_field_init(out fastuidraw_clipper_data_field d)
{
  d.element0_3 = vec4(0.0);
  d.element4_7 = vec4(0.0);
}

void
fastuidraw_clipper_data_init(out fastuidraw_clipper_data d)
{
  d.count = 0;
  d.write_mask = vec4(1.0, 0.0, 0.0, 0.0);
  fastuidraw_clipper_data_field_init(d.b0);
  fastuidraw_clipper_data_field_init(d.b1);
  fastuidraw_clipper_data_field_init(d.b2);
}

void
fastuidraw_clipper_data_push_back(inout fastuidraw_clipper_data d, in vec3 b)
{
  vec4 e0, e1, e2;

  e0 = b.x * d.write_mask;
  e1 = b.y * d.write_mask;
  e2 = b.z * d.write_mask;

  if (d.count < 4)
    {
      d.b0.element0_3 += e0;
      d.b1.element0_3 += e1;
      d.b2.element0_3 += e2;
    }
  else
    {
      d.b0.element4_7 += e0;
      d.b1.element4_7 += e1;
      d.b2.element4_7 += e2;
    }
  d.last_barycentric = b;
  d.write_mask.yzwx = d.write_mask;
  ++d.count;
}

vec3
fastuidraw_compute_intersection(in vec3 p0, in float c0,
                                in vec3 p1, in float c1)
{
  float t;

  t = c0 / (c0 - c1);
  return mix(p0, p1, t);
}

void
fastuidraw_clip_polygon_dumb(in fastuidraw_clipper_data src,
                             in vec3 clip_values,
                             out fastuidraw_clipper_data dst)
{
  vec3 current_bary, last_bary;
  float current_d, last_d;
  bool current_in, last_in;
  fastuidraw_clipper_data_iterator iter;

  last_bary = src.last_barycentric;
  last_d = dot(clip_values, last_bary);
  last_in = bool(last_d >= 0.0);

  fastuidraw_clipper_data_iterator_init_front(iter, src);
  fastuidraw_clipper_data_init(dst);
  
  for (int i = 0; i < src.count; ++i)
    {
      current_bary = fastuidraw_clipper_data_iterator_read(iter, src);
      current_d = dot(clip_values, current_bary);
      current_in = bool(current_d >= 0.0);

      if (current_in != last_in)
        {
          vec3 p;
          p = fastuidraw_compute_intersection(last_bary, last_d,
                                              current_bary, current_d);
          fastuidraw_clipper_data_push_back(dst, p);
        }

      if (current_in)
        {
          fastuidraw_clipper_data_push_back(dst, current_bary);
        }

      last_bary = current_bary;
      last_d = current_d;
      last_in = current_in;
      fastuidraw_clipper_data_iterator_increment(iter);
    }
}

#define fastuidraw_clip_polygon_helper_define(X)                        \
  if (src.count > X)                                                    \
    {                                                                   \
      current_bary = fastuidraw_clipper_data_bary##X(src);              \
      current_d = dot(clip_values, current_bary);                       \
      current_in = bool(current_d >= 0.0);                              \
      if (current_in != last_in)                                        \
        {                                                               \
          vec3 p;                                                       \
          p = fastuidraw_compute_intersection(last_bary, last_d,        \
                                              current_bary, current_d); \
          fastuidraw_clipper_data_push_back(dst, p);                    \
        }                                                               \
                                                                        \
      if (current_in)                                                   \
        {                                                               \
          fastuidraw_clipper_data_push_back(dst, current_bary);         \
        }                                                               \
                                                                        \
      last_bary = current_bary;                                         \
      last_d = current_d;                                               \
      last_in = current_in;                                             \
    }
          

void
fastuidraw_clip_polygon3(in fastuidraw_clipper_data src,
                         in vec3 clip_values,
                         out fastuidraw_clipper_data dst)
{
  vec3 current_bary, last_bary;
  float current_d, last_d;
  bool current_in, last_in;

  last_bary = src.last_barycentric;
  last_d = dot(clip_values, last_bary);
  last_in = bool(last_d >= 0.0);

  fastuidraw_clipper_data_init(dst);
  fastuidraw_clip_polygon_helper_define(0);
  fastuidraw_clip_polygon_helper_define(1);
  fastuidraw_clip_polygon_helper_define(2);
}

void
fastuidraw_clip_polygon4(in fastuidraw_clipper_data src,
                         in vec3 clip_values,
                         out fastuidraw_clipper_data dst)
{
  vec3 current_bary, last_bary;
  float current_d, last_d;
  bool current_in, last_in;

  last_bary = src.last_barycentric;
  last_d = dot(clip_values, last_bary);
  last_in = bool(last_d >= 0.0);

  fastuidraw_clipper_data_init(dst);
  fastuidraw_clip_polygon_helper_define(0);
  fastuidraw_clip_polygon_helper_define(1);
  fastuidraw_clip_polygon_helper_define(2);
  fastuidraw_clip_polygon_helper_define(3);
}

void
fastuidraw_clip_polygon5(in fastuidraw_clipper_data src,
                         in vec3 clip_values,
                         out fastuidraw_clipper_data dst)
{
  vec3 current_bary, last_bary;
  float current_d, last_d;
  bool current_in, last_in;

  last_bary = src.last_barycentric;
  last_d = dot(clip_values, last_bary);
  last_in = bool(last_d >= 0.0);

  fastuidraw_clipper_data_init(dst);
  fastuidraw_clip_polygon_helper_define(0);
  fastuidraw_clip_polygon_helper_define(1);
  fastuidraw_clip_polygon_helper_define(2);
  fastuidraw_clip_polygon_helper_define(3);
  fastuidraw_clip_polygon_helper_define(4);
}

void
fastuidraw_clip_polygon6(in fastuidraw_clipper_data src,
                         in vec3 clip_values,
                         out fastuidraw_clipper_data dst)
{
  vec3 current_bary, last_bary;
  float current_d, last_d;
  bool current_in, last_in;

  last_bary = src.last_barycentric;
  last_d = dot(clip_values, last_bary);
  last_in = bool(last_d >= 0.0);

  fastuidraw_clipper_data_init(dst);
  fastuidraw_clip_polygon_helper_define(0);
  fastuidraw_clip_polygon_helper_define(1);
  fastuidraw_clip_polygon_helper_define(2);
  fastuidraw_clip_polygon_helper_define(3);
  fastuidraw_clip_polygon_helper_define(4);
  fastuidraw_clip_polygon_helper_define(5);
}

void
fastuidraw_clipper_data_emit(in fastuidraw_clipper_data src)
{
  fastuidraw_clipper_data_iterator forward, backward;
  bool take_forward = false;

  if (src.count >= 3)
    {
      fastuidraw_clipper_data_iterator_init_front(forward, src);
      fastuidraw_clipper_data_iterator_init_back(backward, src);

      fastuidraw_emit_vertex(fastuidraw_clipper_data_iterator_read(forward, src));
      fastuidraw_clipper_data_iterator_increment(forward);

      while (forward.count <= backward.count)
        {
          if (take_forward)
            {
              fastuidraw_emit_vertex(fastuidraw_clipper_data_iterator_read(forward, src));
              fastuidraw_clipper_data_iterator_increment(forward);
            }
          else
            {
              fastuidraw_emit_vertex(fastuidraw_clipper_data_iterator_read(backward, src));
              fastuidraw_clipper_data_iterator_decrement(backward);
            }
          take_forward = !take_forward;
        }
      EndPrimitive();
    }
}

void
main(void)
{
  fastuidraw_clipper_data A0, A1, A2, A3, A4;
  vec3 C;
  
  fastuidraw_clipper_data_init(A0);
  fastuidraw_clipper_data_push_back(A0, vec3(1.0, 0.0, 0.0));
  fastuidraw_clipper_data_push_back(A0, vec3(0.0, 1.0, 0.0));
  fastuidraw_clipper_data_push_back(A0, vec3(0.0, 0.0, 1.0));

  C.x = fastuidraw_in[0].fastuidraw_clip_planes.x;
  C.y = fastuidraw_in[1].fastuidraw_clip_planes.x;
  C.z = fastuidraw_in[2].fastuidraw_clip_planes.x;
  fastuidraw_clip_polygon3(A0, C, A1);

  C.x = fastuidraw_in[0].fastuidraw_clip_planes.y;
  C.y = fastuidraw_in[1].fastuidraw_clip_planes.y;
  C.z = fastuidraw_in[2].fastuidraw_clip_planes.y;
  fastuidraw_clip_polygon4(A1, C, A2);

  C.x = fastuidraw_in[0].fastuidraw_clip_planes.z;
  C.y = fastuidraw_in[1].fastuidraw_clip_planes.z;
  C.z = fastuidraw_in[2].fastuidraw_clip_planes.z;
  fastuidraw_clip_polygon5(A2, C, A3);

  C.x = fastuidraw_in[0].fastuidraw_clip_planes.w;
  C.y = fastuidraw_in[1].fastuidraw_clip_planes.w;
  C.z = fastuidraw_in[2].fastuidraw_clip_planes.w;
  fastuidraw_clip_polygon6(A3, C, A4);

  fastuidraw_clipper_data_emit(A4);
}

#else

layout(triangle_strip, max_vertices = 3) out;
void
main(void)
{
  fastuidraw_emit_vertex(vec3(1.0, 0.0, 0.0));
  fastuidraw_emit_vertex(vec3(0.0, 1.0, 0.0));
  fastuidraw_emit_vertex(vec3(0.0, 0.0, 1.0));
}

#endif
