/*!
 * \file fastuidraw_painter_main.vert.glsl.resource_string
 * \brief file fastuidraw_painter_main.vert.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@intel.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@intel.com>
 *
 */


/* Skeleton for Uber-vertex shader, out's of the shader will
   be placed -before- this code.
 */

#ifdef FASTUIDRAW_PAINTER_NORMALIZED_Z_MINUS_1_TO_1
  #define FASTUIDRAW_DEPTH_COEFF (1.0 / float(fastuidraw_half_max_z) )
#else
  #define FASTUIDRAW_DEPTH_COEFF (1.0 / float(fastuidraw_max_z) )
#endif

#ifdef FASTUIDRAW_PAINTER_GL_CLIP_DISTANCE_CLIPS
  #define fastuidraw_clip0 gl_ClipDistance[0]
  #define fastuidraw_clip1 gl_ClipDistance[1]
  #define fastuidraw_clip2 gl_ClipDistance[2]
  #define fastuidraw_clip3 gl_ClipDistance[3]
#else
  #define fastuidraw_clip0 fastuidraw_clip_planes.x
  #define fastuidraw_clip1 fastuidraw_clip_planes.y
  #define fastuidraw_clip2 fastuidraw_clip_planes.z
  #define fastuidraw_clip3 fastuidraw_clip_planes.w
#endif

void
fastuidraw_apply_clipping(in vec3 p, in fastuidraw_clipping_data c)
{
  fastuidraw_clip0 = dot(c.clip0, p);
  fastuidraw_clip1 = dot(c.clip1, p);
  fastuidraw_clip2 = dot(c.clip2, p);
  fastuidraw_clip3 = dot(c.clip3, p);
}


/* make the transformation matrix available to
   vertex shader by making it global here.
 */
mat3 fastuidraw_item_matrix;

void
main(void)
{
  fastuidraw_shader_header h;
  vec4 item_p_brush_p;
  vec3 clip_p;
  fastuidraw_clipping_data clipping;
  float normalized_depth, raw_depth;
  int add_z;

  fastuidraw_read_header(fastuidraw_header_attribute, h);
  fastuidraw_read_clipping(h.clipping_location, clipping);
  fastuidraw_read_item_matrix(h.item_matrix_location, fastuidraw_item_matrix);

  h.item_shader = FASTUIDRAW_EXTRACT_BITS(fastuidraw_item_shader_bit0,
                                          fastuidraw_item_shader_num_bits,
                                          h.item_blend_shader_packed);

  h.blend_shader = FASTUIDRAW_EXTRACT_BITS(fastuidraw_blend_shader_bit0,
                                           fastuidraw_blend_shader_num_bits,
                                           h.item_blend_shader_packed);

  #ifdef FASTUIDRAW_PAINTER_UNPACK_AT_FRAGMENT_SHADER
    {
      fastuidraw_header_varying = fastuidraw_header_attribute;
    }
  #else
    {
      fastuidraw_frag_shader = h.item_shader;
      fastuidraw_frag_shader_data_location = h.item_shader_data_location;
      fastuidraw_blend_shader = h.blend_shader;
      fastuidraw_blend_shader_data_location = h.blend_shader_data_location;
    }
  #endif

  item_p_brush_p = fastuidraw_run_vert_shader(h, add_z);
  fastuidraw_vert_brush_processing(item_p_brush_p.zw, h);

  clip_p = fastuidraw_item_matrix * vec3(item_p_brush_p.xy, 1.0);
  fastuidraw_apply_clipping(clip_p, clipping);

  /* and finally emit gl_Position; the value needed in the
     depth buffer is stored in h.z, but it is an integer that
     starts at 0 and is incremented by one, we need to convert it
     to normalized coords.
   */
  raw_depth = float(add_z + h.z);

  #ifdef FASTUIDRAW_PAINTER_NORMALIZED_Z_MINUS_1_TO_1
    {
      normalized_depth = (FASTUIDRAW_DEPTH_COEFF * raw_depth) - 1.0;
    }
  #else
    {
      normalized_depth = (FASTUIDRAW_DEPTH_COEFF * raw_depth);
    }
  #endif

  #ifdef FASTUIDRAW_PAINTER_NEGATE_POSITION_Y_COORDINATE
    {
      clip_p.y = -clip_p.y;
    }
  #endif

  gl_Position = vec4(clip_p.xy, normalized_depth * clip_p.z, clip_p.z);
}
