/*!
 * \file fastuidraw_painter_uniforms.glsl.resource_string
 * \brief file fastuidraw_painter_uniforms.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@intel.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@intel.com>
 *
 */


#ifdef FASTUIDRAW_PAINTER_COLORSTOP_ATLAS_2D_ARRAY

  FASTUIDRAW_LAYOUT_BINDING(FASTUIDRAW_COLORSTOP_ATLAS_BINDING) uniform sampler2DArray fastuidraw_colorStopAtlas;
  #define fastuidraw_colorStopFetch(x, L) textureLod(fastuidraw_colorStopAtlas, vec3(float(x), 0.0, float(L)), 0.0)

#else

  FASTUIDRAW_LAYOUT_BINDING(FASTUIDRAW_COLORSTOP_ATLAS_BINDING) uniform sampler1DArray fastuidraw_colorStopAtlas;
  #define fastuidraw_colorStopFetch(x, L) textureLod(fastuidraw_colorStopAtlas, vec2(float(x), float(L)), 0.0)

#endif

FASTUIDRAW_LAYOUT_BINDING(FASTUIDRAW_COLOR_TILE_LINEAR_BINDING) uniform sampler2DArray fastuidraw_imageAtlasLinear;
FASTUIDRAW_LAYOUT_BINDING(FASTUIDRAW_COLOR_TILE_NEAREST_BINDING) uniform sampler2DArray fastuidraw_imageAtlasNearest;
FASTUIDRAW_LAYOUT_BINDING(FASTUIDRAW_INDEX_TILE_BINDING) uniform usampler2DArray fastuidraw_imageIndexAtlas;

FASTUIDRAW_LAYOUT_BINDING(FASTUIDRAW_GLYPH_TEXEL_ATLAS_UINT_BINDING) uniform usampler2DArray fastuidraw_glyphTexelStoreUINT;

#ifndef FASTUIDRAW_PAINTER_EMULATE_GLYPH_TEXEL_STORE_FLOAT
FASTUIDRAW_LAYOUT_BINDING(FASTUIDRAW_GLYPH_TEXEL_ATLAS_FLOAT_BINDING) uniform sampler2DArray fastuidraw_glyphTexelStoreFLOAT;
#endif

#ifdef FASTUIDRAW_GLYPH_DATA_STORE_SSBO
  FASTUIDRAW_LAYOUT_BINDING_ARGS(FASTUIDRAW_GLYPH_GEOMETRY_STORE_BINDING, std140) restrict readonly buffer fastuidraw_glyphGeometryDataStore
  {
    vec4 fastuidraw_glyphGeometryDataStore_data[];
  };
  #define fastuidraw_fetch_glyph_data(block) fastuidraw_glyphGeometryDataStore_data[int(block)]

#elif defined(FASTUIDRAW_GLYPH_DATA_STORE_TEXTURE_ARRAY)
  /* The width and height of fastuidraw_glyphGeometryDataStore are
     powers of 2, the values given by FASTUIDRAW_GLYPH_GEOMETRY_WIDTH_LOG2
     and FASTUIDRAW_GLYPH_GEOMETRY_HEIGHT_LOG2. We want to use
     bit shifts and masking to get the correct layer, height and so on.
  */
  FASTUIDRAW_LAYOUT_BINDING(FASTUIDRAW_GLYPH_GEOMETRY_STORE_BINDING) uniform sampler2DArray fastuidraw_glyphGeometryDataStore;
  #define FASTUIDRAW_GLYPH_GEOMETRY_WIDTH_PLUS_HEIGHT_LOG2 uint(FASTUIDRAW_GLYPH_GEOMETRY_WIDTH_LOG2 + FASTUIDRAW_GLYPH_GEOMETRY_HEIGHT_LOG2)
  #define FASTUIDRAW_GLYPH_GEOMETRY_LAYER(T) (uint(T) >> FASTUIDRAW_GLYPH_GEOMETRY_WIDTH_PLUS_HEIGHT_LOG2)
  #define FASTUIDRAW_GLYPH_GEOMETRY_Y(T) FASTUIDRAW_EXTRACT_BITS(FASTUIDRAW_GLYPH_GEOMETRY_WIDTH_LOG2, FASTUIDRAW_GLYPH_GEOMETRY_HEIGHT_LOG2, T)
  #define FASTUIDRAW_GLYPH_GEOMETRY_X(T) FASTUIDRAW_EXTRACT_BITS(0, FASTUIDRAW_GLYPH_GEOMETRY_WIDTH_LOG2, T)
  #define FASTUIDRAW_GLYPH_GEOMETRY_COORD(v) ivec3(FASTUIDRAW_GLYPH_GEOMETRY_X(v), FASTUIDRAW_GLYPH_GEOMETRY_Y(v), FASTUIDRAW_GLYPH_GEOMETRY_LAYER(v))
  #define fastuidraw_fetch_glyph_data(block) texelFetch(fastuidraw_glyphGeometryDataStore, FASTUIDRAW_GLYPH_GEOMETRY_COORD(block), 0)
#else
  FASTUIDRAW_LAYOUT_BINDING(FASTUIDRAW_GLYPH_GEOMETRY_STORE_BINDING) uniform samplerBuffer fastuidraw_glyphGeometryDataStore;
  #define fastuidraw_fetch_glyph_data(block) texelFetch(fastuidraw_glyphGeometryDataStore, int(block))
#endif

#ifdef FASTUIDRAW_PAINTER_USE_DATA_TBO
  FASTUIDRAW_LAYOUT_BINDING(FASTUIDRAW_PAINTER_STORE_TBO_BINDING) uniform usamplerBuffer fastuidraw_painterStore_tbo;
  #define fastuidraw_fetch_data(block) texelFetch(fastuidraw_painterStore_tbo, int(block))
#elif defined(FASTUIDRAW_PAINTER_USE_DATA_SSBO)
  FASTUIDRAW_LAYOUT_BINDING_ARGS(FASTUIDRAW_PAINTER_STORE_SSBO_BINDING, std140) restrict readonly buffer fastuidraw_painterStore_ssbo
  {
    uvec4 fastuidraw_painterStore[];
  };
  #define fastuidraw_fetch_data(block) uvec4(fastuidraw_painterStore[int(block)])
#elif defined(FASTUIDRAW_PAINTER_USE_DATA_UBO)
/*
  Type in the array for the uniform blocks:
    FASTUIDRAW_PAINTER_DATA_STORE_UINT_TYPE is uint, uvec2, uvec3 or uvec4
  Size of the array is given by FASTUIDRAW_PAINTER_DATA_STORE_ARRAY_SIZE
 */
  FASTUIDRAW_LAYOUT_BINDING_ARGS(FASTUIDRAW_PAINTER_STORE_UBO_BINDING, std140) uniform fastuidraw_painterStore_ubo
  {
    uvec4 fastuidraw_painterStore[FASTUIDRAW_PAINTER_DATA_STORE_ARRAY_SIZE];
  };

  #define fastuidraw_fetch_data(block) uvec4(fastuidraw_painterStore[int(block)])

#endif

FASTUIDRAW_LAYOUT_BINDING(FASTUIDRAW_PAINTER_EXTERNAL_TEXTURE_BINDING) uniform sampler2D fastuidraw_external_texture;
